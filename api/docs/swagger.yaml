definitions:
  entity.CreateCategoryRequest:
    properties:
      merchant_id:
        type: string
      name:
        type: string
    type: object
  entity.CreateCategoryResponse:
    properties:
      guid:
        type: string
    type: object
  entity.CreateCourierResponse:
    properties:
      guid:
        type: string
    type: object
  entity.CreateMerchantBranchRequest:
    properties:
      address:
        type: string
      merchant_id:
        type: string
      name:
        type: string
    type: object
  entity.CreateMerchantBranchResponse:
    properties:
      guid:
        type: string
    type: object
  entity.CreateMerchantRequest:
    properties:
      background_image:
        type: string
      comission:
        type: number
      delivery_time:
        type: number
      description:
        type: string
      logo:
        type: string
      name:
        type: string
      status:
        type: boolean
    type: object
  entity.CreateMerchantResponse:
    properties:
      guid:
        type: string
    type: object
  entity.CreateOrderRequest:
    properties:
      address:
        type: string
      branch_id:
        type: string
      comment:
        type: string
      delivery_type:
        type: string
      payment_type:
        type: string
      products:
        items:
          $ref: '#/definitions/entity.OrderProduct'
        type: array
      user_id:
        type: string
    type: object
  entity.CreateOrderResponse:
    properties:
      guid:
        type: string
    type: object
  entity.CreateProductRequest:
    properties:
      category_id:
        type: string
      image:
        type: string
      name:
        type: string
      options:
        items:
          $ref: '#/definitions/entity.Option'
        type: array
      price:
        type: number
    type: object
  entity.CreateProductResponse:
    properties:
      guid:
        type: string
    type: object
  entity.CreateUserResponse:
    properties:
      guid:
        type: string
    type: object
  entity.CreateVendorUserResponse:
    properties:
      guid:
        type: string
    type: object
  entity.DeleteCategoryRequest:
    properties:
      guid:
        type: string
    type: object
  entity.DeleteCourierRequest:
    properties:
      guid:
        type: string
    type: object
  entity.DeleteMerchantBranchRequest:
    properties:
      guid:
        type: string
    type: object
  entity.DeleteMerchantRequest:
    properties:
      guid:
        type: string
    type: object
  entity.DeleteOrderRequest:
    properties:
      guid:
        type: string
    type: object
  entity.DeleteProductRequest:
    properties:
      guid:
        type: string
    type: object
  entity.DeleteUserRequest:
    properties:
      guid:
        type: string
    type: object
  entity.DeleteVendorUserRequest:
    properties:
      guid:
        type: string
    type: object
  entity.GetCategoryResponse:
    properties:
      created_at:
        type: string
      guid:
        type: string
      merchant_id:
        type: string
      name:
        type: string
    type: object
  entity.GetCourierResponse:
    properties:
      created_at:
        type: string
      guid:
        type: string
      login:
        type: string
      name:
        type: string
      password:
        type: string
    type: object
  entity.GetMerchantBranchOrdersResponse:
    properties:
      orders:
        items:
          $ref: '#/definitions/entity.GetOrderResponse'
        type: array
    type: object
  entity.GetMerchantBranchResponse:
    properties:
      address:
        type: string
      created_at:
        type: string
      guid:
        type: string
      merchant_id:
        type: string
      name:
        type: string
    type: object
  entity.GetMerchantBranchesResponse:
    properties:
      merchant_branches:
        items:
          $ref: '#/definitions/entity.GetMerchantBranchResponse'
        type: array
    type: object
  entity.GetMerchantOrdersResponse:
    properties:
      orders:
        items:
          $ref: '#/definitions/entity.GetOrderResponse'
        type: array
    type: object
  entity.GetMerchantProductsResponse:
    properties:
      products:
        items:
          $ref: '#/definitions/entity.GetProductResponse'
        type: array
    type: object
  entity.GetMerchantResponse:
    properties:
      background_image:
        type: string
      comission:
        type: number
      created_at:
        type: string
      delivery_time:
        type: number
      description:
        type: string
      guid:
        type: string
      logo:
        type: string
      name:
        type: string
      status:
        type: boolean
    type: object
  entity.GetOrderResponse:
    properties:
      address:
        type: string
      branch_address:
        type: string
      branch_id:
        type: string
      branch_name:
        type: string
      comission:
        type: number
      comment:
        type: string
      courier_id:
        type: string
      created_at:
        type: string
      delivery_price:
        type: number
      delivery_time:
        type: number
      delivery_type:
        type: string
      guid:
        type: string
      image:
        type: string
      merchant_name:
        type: string
      payment_type:
        type: string
      products:
        items:
          $ref: '#/definitions/entity.OrderProducts'
        type: array
      status:
        type: string
      user_id:
        type: string
    type: object
  entity.GetProductResponse:
    properties:
      category_id:
        type: string
      created_at:
        type: string
      guid:
        type: string
      id:
        type: integer
      image:
        type: string
      name:
        type: string
      options:
        items:
          $ref: '#/definitions/entity.Option'
        type: array
      price:
        type: number
    type: object
  entity.GetUserOrdersResponse:
    properties:
      orders:
        items:
          $ref: '#/definitions/entity.GetOrderResponse'
        type: array
    type: object
  entity.GetUserResponse:
    properties:
      created_at:
        type: string
      guid:
        type: string
      login:
        type: string
      name:
        type: string
      password:
        type: string
      phone_number:
        type: string
    type: object
  entity.GetVendorUserResponse:
    properties:
      created_at:
        type: string
      guid:
        type: string
      login:
        type: string
      merchant_branch_id:
        type: string
      name:
        type: string
      password:
        type: string
    type: object
  entity.ListCategoryResponse:
    properties:
      categories:
        items:
          $ref: '#/definitions/entity.GetCategoryResponse'
        type: array
    type: object
  entity.ListCourierOrdersResponse:
    properties:
      orders:
        items:
          $ref: '#/definitions/entity.GetOrderResponse'
        type: array
    type: object
  entity.ListCourierResponse:
    properties:
      couriers:
        items:
          $ref: '#/definitions/entity.GetCourierResponse'
        type: array
    type: object
  entity.ListMerchantBranchesResponse:
    properties:
      merchant_branches:
        items:
          $ref: '#/definitions/entity.GetMerchantBranchResponse'
        type: array
    type: object
  entity.ListMerchantResponse:
    properties:
      merchants:
        items:
          $ref: '#/definitions/entity.GetMerchantResponse'
        type: array
    type: object
  entity.ListOrderResponse:
    properties:
      orders:
        items:
          $ref: '#/definitions/entity.GetOrderResponse'
        type: array
    type: object
  entity.ListProductResponse:
    properties:
      products:
        items:
          $ref: '#/definitions/entity.GetProductResponse'
        type: array
    type: object
  entity.ListUserResponse:
    properties:
      users:
        items:
          $ref: '#/definitions/entity.GetUserResponse'
        type: array
    type: object
  entity.ListVendorUserResponse:
    properties:
      vendor_users:
        items:
          $ref: '#/definitions/entity.GetVendorUserResponse'
        type: array
    type: object
  entity.LoginCourierRequest:
    properties:
      login:
        type: string
      password:
        type: string
    type: object
  entity.LoginCourierResponse:
    properties:
      exist:
        type: boolean
      guid:
        type: string
      name:
        type: string
    type: object
  entity.LoginUserRequest:
    properties:
      login:
        type: string
      password:
        type: string
    type: object
  entity.LoginUserResponse:
    properties:
      exist:
        type: boolean
      guid:
        type: string
      name:
        type: string
      phone_number:
        type: string
    type: object
  entity.LoginVendorUserRequest:
    properties:
      login:
        type: string
      password:
        type: string
    type: object
  entity.LoginVendorUserResponse:
    properties:
      exist:
        type: boolean
      guid:
        type: string
      merchant_id:
        type: string
      name:
        type: string
    type: object
  entity.Option:
    properties:
      name:
        type: string
      price:
        type: number
    type: object
  entity.OrderProduct:
    properties:
      count:
        type: integer
      product_id:
        type: integer
    type: object
  entity.OrderProducts:
    properties:
      category_id:
        type: string
      count:
        type: integer
      created_at:
        type: string
      guid:
        type: string
      id:
        type: integer
      image:
        type: string
      name:
        type: string
      options:
        items:
          $ref: '#/definitions/entity.Option'
        type: array
      price:
        type: number
    type: object
  entity.ResponseOK:
    properties:
      message:
        type: object
    type: object
  entity.UpdateCategoryRequest:
    properties:
      guid:
        type: string
      merchant_id:
        type: string
      name:
        type: string
    type: object
  entity.UpdateCategoryResponse:
    properties:
      guid:
        type: string
    type: object
  entity.UpdateCourierRequest:
    properties:
      guid:
        type: string
      login:
        type: string
      name:
        type: string
      password:
        type: string
    type: object
  entity.UpdateCourierResponse:
    properties:
      guid:
        type: string
    type: object
  entity.UpdateMerchantBranchRequest:
    properties:
      address:
        type: string
      guid:
        type: string
      merchant_id:
        type: string
      name:
        type: string
    type: object
  entity.UpdateMerchantBranchResponse:
    properties:
      guid:
        type: string
    type: object
  entity.UpdateMerchantRequest:
    properties:
      background_image:
        type: string
      comission:
        type: number
      delivery_time:
        type: number
      description:
        type: string
      guid:
        type: string
      logo:
        type: string
      name:
        type: string
      status:
        type: boolean
    type: object
  entity.UpdateMerchantResponse:
    properties:
      guid:
        type: string
    type: object
  entity.UpdateOrderRequest:
    properties:
      address:
        type: string
      branch_id:
        type: string
      comment:
        type: string
      delivery_type:
        type: string
      guid:
        type: string
      payment_type:
        type: string
      products:
        items:
          $ref: '#/definitions/entity.OrderProduct'
        type: array
      status:
        type: string
      user_id:
        type: string
    type: object
  entity.UpdateOrderResponse:
    properties:
      guid:
        type: string
    type: object
  entity.UpdateOrderStatusRequest:
    properties:
      courier_id:
        type: string
      guid:
        type: string
      status:
        type: string
    type: object
  entity.UpdateProductRequest:
    properties:
      category_id:
        type: string
      guid:
        type: string
      image:
        type: string
      name:
        type: string
      options:
        items:
          $ref: '#/definitions/entity.Option'
        type: array
      price:
        type: number
    type: object
  entity.UpdateProductResponse:
    properties:
      guid:
        type: string
    type: object
  entity.UpdateUserRequest:
    properties:
      guid:
        type: string
      login:
        type: string
      name:
        type: string
      password:
        type: string
      phone_number:
        type: string
    type: object
  entity.UpdateUserResponse:
    properties:
      guid:
        type: string
    type: object
  entity.UpdateVendorUserRequest:
    properties:
      guid:
        type: string
      login:
        type: string
      merchant_branch_id:
        type: string
      name:
        type: string
      password:
        type: string
    type: object
  entity.UpdateVendorUserResponse:
    properties:
      guid:
        type: string
    type: object
  models.ResponseError:
    properties:
      code:
        type: string
      message:
        type: string
    type: object
  models.User:
    properties:
      login:
        type: string
      name:
        type: string
      password:
        type: string
      phone_number:
        type: string
    type: object
  models.VendorUser:
    properties:
      login:
        type: string
      merchant_branch_id:
        type: string
      name:
        type: string
      password:
        type: string
    type: object
info:
  contact: {}
paths:
  /v1/category/create:
    post:
      consumes:
      - application/json
      description: API that create category
      parameters:
      - description: body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/entity.CreateCategoryRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.CreateCategoryResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ResponseError'
      summary: Create category
      tags:
      - category
  /v1/category/delete:
    delete:
      consumes:
      - application/json
      description: API that delete category
      parameters:
      - description: body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/entity.DeleteCategoryRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.ResponseOK'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ResponseError'
      summary: Delete category
      tags:
      - category
  /v1/category/get/{guid}:
    get:
      consumes:
      - application/json
      description: API that get category
      parameters:
      - description: guid
        in: path
        name: guid
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.GetCategoryResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ResponseError'
      summary: Get category
      tags:
      - category
  /v1/category/list:
    get:
      consumes:
      - application/json
      description: API list Categories
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.ListCategoryResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ResponseError'
      summary: List Categories
      tags:
      - category
  /v1/category/update:
    put:
      consumes:
      - application/json
      description: API that update category
      parameters:
      - description: body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/entity.UpdateCategoryRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.UpdateCategoryResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ResponseError'
      summary: Update category
      tags:
      - category
  /v1/courier/{guid}/list-orders:
    get:
      consumes:
      - application/json
      description: API list courier orders
      parameters:
      - description: guid
        in: path
        name: guid
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.ListCourierOrdersResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ResponseError'
      summary: List courier orders
      tags:
      - courier
  /v1/courier/create:
    post:
      consumes:
      - application/json
      description: API that create courier
      parameters:
      - description: body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/models.User'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.CreateCourierResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ResponseError'
      summary: Create courier
      tags:
      - courier
  /v1/courier/delete:
    delete:
      consumes:
      - application/json
      description: API that delete courier
      parameters:
      - description: body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/entity.DeleteCourierRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.ResponseOK'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ResponseError'
      summary: Delete courier
      tags:
      - courier
  /v1/courier/get/{guid}:
    get:
      consumes:
      - application/json
      description: API that get courier
      parameters:
      - description: guid
        in: path
        name: guid
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.GetCourierResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ResponseError'
      summary: Get courier
      tags:
      - courier
  /v1/courier/list:
    get:
      consumes:
      - application/json
      description: API list couriers
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.ListCourierResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ResponseError'
      summary: List couriers
      tags:
      - courier
  /v1/courier/login:
    post:
      consumes:
      - application/json
      description: Login courier
      parameters:
      - description: body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/entity.LoginCourierRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.LoginCourierResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ResponseError'
      summary: Login courier
      tags:
      - courier
  /v1/courier/update:
    put:
      consumes:
      - application/json
      description: API that update courier
      parameters:
      - description: body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/entity.UpdateCourierRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.UpdateCourierResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ResponseError'
      summary: Update courier
      tags:
      - courier
  /v1/merchant-branch/{guid}/orders:
    get:
      consumes:
      - application/json
      description: API that get merchant-branch orders
      parameters:
      - description: guid
        in: path
        name: guid
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.GetMerchantBranchOrdersResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ResponseError'
      summary: Get merchant-branch orders
      tags:
      - merchant-branch
  /v1/merchant-branch/create:
    post:
      consumes:
      - application/json
      description: API that create merchant-branch
      parameters:
      - description: body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/entity.CreateMerchantBranchRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.CreateMerchantBranchResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ResponseError'
      summary: Create merchant-branch
      tags:
      - merchant-branch
  /v1/merchant-branch/delete:
    delete:
      consumes:
      - application/json
      description: API that delete merchant-branch
      parameters:
      - description: body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/entity.DeleteMerchantBranchRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.ResponseOK'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ResponseError'
      summary: Delete merchant-branch
      tags:
      - merchant-branch
  /v1/merchant-branch/get/{guid}:
    get:
      consumes:
      - application/json
      description: API that get merchant-branch
      parameters:
      - description: guid
        in: path
        name: guid
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.GetMerchantBranchResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ResponseError'
      summary: Get merchant-branch
      tags:
      - merchant-branch
  /v1/merchant-branch/list:
    get:
      consumes:
      - application/json
      description: API list merchants-branches
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.ListMerchantBranchesResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ResponseError'
      summary: List merchant-branches
      tags:
      - merchant-branch
  /v1/merchant-branch/update:
    put:
      consumes:
      - application/json
      description: API that update merchant-branch
      parameters:
      - description: body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/entity.UpdateMerchantBranchRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.UpdateMerchantBranchResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ResponseError'
      summary: Update merchant-branch
      tags:
      - merchant-branch
  /v1/merchant/create:
    post:
      consumes:
      - application/json
      description: API that create merchant
      parameters:
      - description: body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/entity.CreateMerchantRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.CreateMerchantResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ResponseError'
      summary: Create merchant
      tags:
      - merchant
  /v1/merchant/delete:
    delete:
      consumes:
      - application/json
      description: API that delete merchant
      parameters:
      - description: body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/entity.DeleteMerchantRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.ResponseOK'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ResponseError'
      summary: Delete merchant
      tags:
      - merchant
  /v1/merchant/get-branches/{guid}:
    get:
      consumes:
      - application/json
      description: API that get merchant-branches
      parameters:
      - description: guid
        in: path
        name: guid
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.GetMerchantBranchesResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ResponseError'
      summary: Get merchant-branches by merchant id
      tags:
      - merchant
  /v1/merchant/get/{guid}:
    get:
      consumes:
      - application/json
      description: API that get merchant
      parameters:
      - description: guid
        in: path
        name: guid
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.GetMerchantResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ResponseError'
      summary: Get merchant
      tags:
      - merchant
  /v1/merchant/list:
    get:
      consumes:
      - application/json
      description: API list merchants
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.ListMerchantResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ResponseError'
      summary: List merchants
      tags:
      - merchant
  /v1/merchant/orders/{guid}:
    get:
      consumes:
      - application/json
      description: API that get merchant-orders
      parameters:
      - description: guid
        in: path
        name: guid
        required: true
        type: string
      - description: status
        in: query
        name: status
        type: string
      - description: branch_name
        in: query
        name: branch_name
        type: string
      - description: user_name
        in: query
        name: user_name
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.GetMerchantOrdersResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ResponseError'
      summary: Get merchant-orders by merchant id
      tags:
      - merchant
  /v1/merchant/products/{guid}:
    get:
      consumes:
      - application/json
      description: API that get merchant-products
      parameters:
      - description: guid
        in: path
        name: guid
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.GetMerchantProductsResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ResponseError'
      summary: Get merchant-products by merchant id
      tags:
      - merchant
  /v1/merchant/update:
    put:
      consumes:
      - application/json
      description: API that update merchant
      parameters:
      - description: body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/entity.UpdateMerchantRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.UpdateMerchantResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ResponseError'
      summary: Update merchant
      tags:
      - merchant
  /v1/order/create:
    post:
      consumes:
      - application/json
      description: API that create order
      parameters:
      - description: body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/entity.CreateOrderRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.CreateOrderResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ResponseError'
      summary: Create order
      tags:
      - order
  /v1/order/delete:
    delete:
      consumes:
      - application/json
      description: API that delete order
      parameters:
      - description: body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/entity.DeleteOrderRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.ResponseOK'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ResponseError'
      summary: Delete order
      tags:
      - order
  /v1/order/get/{guid}:
    get:
      consumes:
      - application/json
      description: API that get order
      parameters:
      - description: guid
        in: path
        name: guid
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.GetOrderResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ResponseError'
      summary: Get order
      tags:
      - order
  /v1/order/list:
    get:
      consumes:
      - application/json
      description: API list orders
      parameters:
      - description: status
        in: query
        name: status
        type: string
      - description: merchant_name
        in: query
        name: merchant_name
        type: string
      - description: branch_name
        in: query
        name: branch_name
        type: string
      - description: user_name
        in: query
        name: user_name
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.ListOrderResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ResponseError'
      summary: List orders
      tags:
      - order
  /v1/order/update:
    put:
      consumes:
      - application/json
      description: API that update order
      parameters:
      - description: body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/entity.UpdateOrderRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.UpdateOrderResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ResponseError'
      summary: Update order
      tags:
      - order
  /v1/order/update-status:
    put:
      consumes:
      - application/json
      description: API that update order status
      parameters:
      - description: body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/entity.UpdateOrderStatusRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.UpdateOrderResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ResponseError'
      summary: Update order status
      tags:
      - order
  /v1/product/create:
    post:
      consumes:
      - application/json
      description: API that create product
      parameters:
      - description: body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/entity.CreateProductRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.CreateProductResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ResponseError'
      summary: Create product
      tags:
      - product
  /v1/product/delete:
    delete:
      consumes:
      - application/json
      description: API that delete product
      parameters:
      - description: body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/entity.DeleteProductRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.ResponseOK'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ResponseError'
      summary: Delete product
      tags:
      - product
  /v1/product/get/{guid}:
    get:
      consumes:
      - application/json
      description: API that get product
      parameters:
      - description: guid
        in: path
        name: guid
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.GetProductResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ResponseError'
      summary: Get product
      tags:
      - product
  /v1/product/list:
    get:
      consumes:
      - application/json
      description: API list products
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.ListProductResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ResponseError'
      summary: List Products
      tags:
      - product
  /v1/product/update:
    put:
      consumes:
      - application/json
      description: API that update product
      parameters:
      - description: body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/entity.UpdateProductRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.UpdateProductResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ResponseError'
      summary: Update product
      tags:
      - product
  /v1/user/{guid}/orders:
    get:
      consumes:
      - application/json
      description: API that get user orders
      parameters:
      - description: guid
        in: path
        name: guid
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.GetUserOrdersResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ResponseError'
      summary: Get user orders
      tags:
      - user
  /v1/user/create:
    post:
      consumes:
      - application/json
      description: API that create user
      parameters:
      - description: body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/models.User'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.CreateUserResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ResponseError'
      summary: Create user
      tags:
      - user
  /v1/user/delete:
    delete:
      consumes:
      - application/json
      description: API that delete user
      parameters:
      - description: body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/entity.DeleteUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.ResponseOK'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ResponseError'
      summary: Delete user
      tags:
      - user
  /v1/user/get/{guid}:
    get:
      consumes:
      - application/json
      description: API that get user
      parameters:
      - description: guid
        in: path
        name: guid
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.GetUserResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ResponseError'
      summary: Get user
      tags:
      - user
  /v1/user/list:
    get:
      consumes:
      - application/json
      description: API list users
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.ListUserResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ResponseError'
      summary: List users
      tags:
      - user
  /v1/user/login:
    post:
      consumes:
      - application/json
      description: Login user
      parameters:
      - description: body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/entity.LoginUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.LoginUserResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ResponseError'
      summary: Login user
      tags:
      - user
  /v1/user/update:
    put:
      consumes:
      - application/json
      description: API that update user
      parameters:
      - description: body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/entity.UpdateUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.UpdateUserResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ResponseError'
      summary: Update user
      tags:
      - user
  /v1/vendor-user/create:
    post:
      consumes:
      - application/json
      description: API that create vendor-user
      parameters:
      - description: body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/models.VendorUser'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.CreateVendorUserResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ResponseError'
      summary: Create vendor-user
      tags:
      - vendor-user
  /v1/vendor-user/delete:
    delete:
      consumes:
      - application/json
      description: API that delete vendor-user
      parameters:
      - description: body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/entity.DeleteVendorUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.ResponseOK'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ResponseError'
      summary: Delete vendor-user
      tags:
      - vendor-user
  /v1/vendor-user/get/{guid}:
    get:
      consumes:
      - application/json
      description: API that get vendor-user
      parameters:
      - description: guid
        in: path
        name: guid
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.GetVendorUserResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ResponseError'
      summary: Get vendor-user
      tags:
      - vendor-user
  /v1/vendor-user/list:
    get:
      consumes:
      - application/json
      description: API list vendor-users
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.ListVendorUserResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ResponseError'
      summary: List vendor-users
      tags:
      - vendor-user
  /v1/vendor-user/login:
    post:
      consumes:
      - application/json
      description: Login vendor user
      parameters:
      - description: body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/entity.LoginVendorUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.LoginVendorUserResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ResponseError'
      summary: Login vendor user
      tags:
      - vendor-user
  /v1/vendor-user/update:
    put:
      consumes:
      - application/json
      description: API that update vendor-user
      parameters:
      - description: body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/entity.UpdateVendorUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.UpdateVendorUserResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ResponseError'
      summary: Update vendor-user
      tags:
      - vendor-user
securityDefinitions:
  ApiKeyAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
